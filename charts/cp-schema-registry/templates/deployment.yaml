apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cp-schema-registry.fullname" . }}
  labels:
    {{- include "cp-schema-registry.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "cp-schema-registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cp-schema-registry.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cp-schema-registry.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort | default .Values.service.port }}
              protocol: TCP
            {{- if .Values.metrics.exporter.enabled }}
            - name: jmx
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
            {{- range $port := .Values.service.extraPorts }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              protocol: TCP
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if .Values.livenessProbeCustom }}
            {{- toYaml .Values.livenessProbeCustom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.service.healthPath | default "/" | quote }}
              port: {{ .Values.service.targetPort | default .Values.service.port }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if .Values.readinessProbeCustom }}
            {{- toYaml .Values.readinessProbeCustom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.service.healthPath | default "/" | quote }}
              port: {{ .Values.service.targetPort | default .Values.service.port }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            {{- end }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            {{- if .Values.startupProbeCustom }}
            {{- toYaml .Values.startupProbeCustom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.service.healthPath | default "/" | quote }}
              port: {{ .Values.service.targetPort | default .Values.service.port }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            {{- end }}
          {{- end }}
          env:
          - name: SCHEMA_REGISTRY_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          # Variables from secrets have precedence
          {{- $envList := dict -}}
          {{- if .Values.envFromSecrets }}
          {{- range $key, $value := .Values.envFromSecrets }}
          {{- if not (hasKey $envList $key) }}
          - name: {{ $key | upper }}
            valueFrom:
              secretKeyRef:
                name: {{ $value.name }}
                key: {{ $value.key | default $key }}
          {{- $_ := set $envList $key true }}
          {{- end }}
          {{- end }}
          {{- end }}
          # Add Variables in plain text if they were not already added from secrets
          {{- if .Values.env }}
          {{- range $key, $value := .Values.env }}
          {{- if not (hasKey $envList $key) }}
          - name: {{ $key | upper }}
            value: {{ $value | quote }}
          {{- $_ := set $envList $key true }}
          {{- end }}
          {{- end }}
          {{- end }}
          - name: SCHEMA_REGISTRY_LISTENERS
            value: http://0.0.0.0:{{ .Values.service.port }}
          {{- if not .Values.env.SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID }}
          - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
            value: {{ .Release.Name }}
          {{- end }}
          {{- if .Values.metrics.enabled }}
          - name: JMX_PORT
            value: "{{ .Values.metrics.port }}"
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.exporter.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.metrics.exporter.image.repository }}:{{ .Values.metrics.exporter.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.exporter.image.pullPolicy }}
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.metrics.exporter.port | quote }}
          - /etc/jmx-schema-registry/jmx-schema-registry-prometheus.yml
          ports:
          - name: metrics
            containerPort: {{ .Values.metrics.exporter.port }}
            protocol: TCP
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-schema-registry
        {{- end }}
      volumes:
        {{- if .Values.metrics.exporter.enabled }}
        - name: jmx-config
          configMap:
            name: {{ include "cp-schema-registry.fullname" . }}-jmx-configmap
        {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
